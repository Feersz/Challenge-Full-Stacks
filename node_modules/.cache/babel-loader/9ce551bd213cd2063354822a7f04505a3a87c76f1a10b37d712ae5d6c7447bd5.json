{"ast":null,"code":"// api.js\nexport function srcset(image, size, rows = 1, cols = 1) {\n  return {\n    src: `${image}?size=${size * cols}x${size * rows}`,\n    srcSet: `${image}?size=${size * cols}x${size * rows}&dpr=2 2x`\n  };\n}\nconst FLICKR_API_KEY = '033fd69cd3a3d923ca5974c71aeaa0bb'; // Replace with your Flickr API key\nexport async function fetchRandomFlickrData() {\n  try {\n    const response = await fetch(`https://www.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key=${FLICKR_API_KEY}&format=json&nojsoncallback=1&per_page=12`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch Flickr data');\n    }\n    const data = await response.json();\n    const photos = data.photos.photo;\n    return photos.map(photo => ({\n      img: `https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`,\n      title: photo.title,\n      rows: 1,\n      cols: 1\n    }));\n  } catch (error) {\n    console.error('Error fetching Flickr data:', error);\n    return [];\n  }\n}\nexport async function fetchFlickrData(searchTerm) {\n  try {\n    let apiUrl = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${FLICKR_API_KEY}&format=json&nojsoncallback=1&per_page=12`;\n    if (searchTerm) {\n      apiUrl += `&text=${encodeURIComponent(searchTerm)}`;\n    }\n    const response = await fetch(apiUrl);\n    if (!response.ok) {\n      throw new Error('Failed to fetch Flickr data');\n    }\n    const data = await response.json();\n    const photos = data.photos.photo;\n    return photos.map(photo => ({\n      img: `https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`,\n      title: photo.title,\n      rows: 1,\n      cols: 1\n    }));\n  } catch (error) {\n    console.error('Error fetching Flickr data:', error);\n    return [];\n  }\n}","map":{"version":3,"names":["srcset","image","size","rows","cols","src","srcSet","FLICKR_API_KEY","fetchRandomFlickrData","response","fetch","ok","Error","data","json","photos","photo","map","img","farm","server","id","secret","title","error","console","fetchFlickrData","searchTerm","apiUrl","encodeURIComponent"],"sources":["C:/Users/NEW GAME/Documents/Proyectos/challenge-react2/src/api.js"],"sourcesContent":["// api.js\r\nexport function srcset(image, size, rows = 1, cols = 1) {\r\n    return {\r\n      src: `${image}?size=${size * cols}x${size * rows}`,\r\n      srcSet: `${image}?size=${size * cols}x${size * rows}&dpr=2 2x`,\r\n    };\r\n  }\r\n  const FLICKR_API_KEY = '033fd69cd3a3d923ca5974c71aeaa0bb'; // Replace with your Flickr API key\r\n  export async function fetchRandomFlickrData() {\r\n    try {\r\n      const response = await fetch(\r\n        `https://www.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key=${FLICKR_API_KEY}&format=json&nojsoncallback=1&per_page=12`\r\n      );\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch Flickr data');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      const photos = data.photos.photo;\r\n      return photos.map((photo) => ({\r\n        img: `https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`,\r\n        title: photo.title,\r\n        rows: 1,\r\n        cols: 1,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching Flickr data:', error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  export async function fetchFlickrData(searchTerm) {\r\n    try {\r\n      let apiUrl = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${FLICKR_API_KEY}&format=json&nojsoncallback=1&per_page=12`;\r\n  \r\n      if (searchTerm) {\r\n        apiUrl += `&text=${encodeURIComponent(searchTerm)}`;\r\n      }\r\n  \r\n      const response = await fetch(apiUrl);\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch Flickr data');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      const photos = data.photos.photo;\r\n      return photos.map((photo) => ({\r\n        img: `https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`,\r\n        title: photo.title,\r\n        rows: 1,\r\n        cols: 1,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching Flickr data:', error);\r\n      return [];\r\n    }\r\n  }\r\n  "],"mappings":"AAAA;AACA,OAAO,SAASA,MAAMA,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,CAAC,EAAE;EACpD,OAAO;IACLC,GAAG,EAAG,GAAEJ,KAAM,SAAQC,IAAI,GAAGE,IAAK,IAAGF,IAAI,GAAGC,IAAK,EAAC;IAClDG,MAAM,EAAG,GAAEL,KAAM,SAAQC,IAAI,GAAGE,IAAK,IAAGF,IAAI,GAAGC,IAAK;EACtD,CAAC;AACH;AACA,MAAMI,cAAc,GAAG,kCAAkC,CAAC,CAAC;AAC3D,OAAO,eAAeC,qBAAqBA,CAAA,EAAG;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,gFAA+EH,cAAe,2CACjG,CAAC;IAED,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,MAAMC,MAAM,GAAGF,IAAI,CAACE,MAAM,CAACC,KAAK;IAChC,OAAOD,MAAM,CAACE,GAAG,CAAED,KAAK,KAAM;MAC5BE,GAAG,EAAG,eAAcF,KAAK,CAACG,IAAK,qBAAoBH,KAAK,CAACI,MAAO,IAAGJ,KAAK,CAACK,EAAG,IAAGL,KAAK,CAACM,MAAO,MAAK;MACjGC,KAAK,EAAEP,KAAK,CAACO,KAAK;MAClBpB,IAAI,EAAE,CAAC;MACPC,IAAI,EAAE;IACR,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOoB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF;AAEA,OAAO,eAAeE,eAAeA,CAACC,UAAU,EAAE;EAChD,IAAI;IACF,IAAIC,MAAM,GAAI,6EAA4ErB,cAAe,2CAA0C;IAEnJ,IAAIoB,UAAU,EAAE;MACdC,MAAM,IAAK,SAAQC,kBAAkB,CAACF,UAAU,CAAE,EAAC;IACrD;IAEA,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAACkB,MAAM,CAAC;IAEpC,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,MAAMC,MAAM,GAAGF,IAAI,CAACE,MAAM,CAACC,KAAK;IAChC,OAAOD,MAAM,CAACE,GAAG,CAAED,KAAK,KAAM;MAC5BE,GAAG,EAAG,eAAcF,KAAK,CAACG,IAAK,qBAAoBH,KAAK,CAACI,MAAO,IAAGJ,KAAK,CAACK,EAAG,IAAGL,KAAK,CAACM,MAAO,MAAK;MACjGC,KAAK,EAAEP,KAAK,CAACO,KAAK;MAClBpB,IAAI,EAAE,CAAC;MACPC,IAAI,EAAE;IACR,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOoB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}